{%- comment -%}
{
  "pack_name": "Value icons - numbers",
  "pack_author": "Design Packs"
}
{%- endcomment -%}

{% comment %} Security Code - hides section when app uninstalled {% endcomment %}
{%- unless content_for_header contains 'design_packs_file.js' -%}
  {%- if request.design_mode -%}
    <div class="dsgn-pck__no-app-warning">
      <div class="dsgn-pck__no-app-warning-background">
      </div>
      <div class="dsgn-pck__no-app-warning-text dsgn-pck__rte">
        <p><strong>WARNING!</strong> This premium section will not display properly without an active subscription for <a href="https://apps.shopify.com/design-packs" target="_blank" rel="nofollow">Design Packs</a>. If you need any support please email <a href="mailto:info@design-packs.com" target="_blank">info@design-packs.com</a> with your questions.</p>
      </div>
    </div>
  {%- endif -%}
  {%- break -%}
{%- endunless -%}

{% comment %} Images: responsive image widths {% endcomment %}
{%- assign widths = '180, 360, 540, 720, 900, 1080, 1296, 1512, 1728, 1950, 2100, 2260, 2450, 2700, 3000, 3350, 3750, 4100' -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  #DP--{{ section.id }} {
    --main-font: {{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }};
    --main-font-weight: {{ section.settings.main_font.weight }};
    --main-font-style: {{ section.settings.main_font.style }};
    --heading-font: {{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }};
    --heading-font-weight: {{ section.settings.heading_font.weight }};
    --heading-font-style: {{ section.settings.heading_font.style }};
  }
{%- endif -%}

#DP--{{ section.id }} {
  background: {{ section.settings.background_color }};
  margin-top: {{ section.settings.outer_margin }}px;
  margin-bottom: {{ section.settings.outer_margin }}px;
}

#DP--{{ section.id }} .dsgn-pck__sizer {
  padding-top: {{ section.settings.inner_padding }}px;
  padding-bottom: {{ section.settings.inner_padding }}px;
  width: {{ section.settings.base_width }}%;
  max-width: {{ max_width }};
  margin-left: auto;
  margin-right: auto;
}

#DP--{{ section.id }} .dsgn-pck__item img {
  width: 100%;
  object-fit: contain;
}

#DP--{{ section.id }} .dsgn-pck__icons {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  justify-content: space-between;
}

#DP--{{ section.id }} .dsgn-pck__item {
  height: auto;
  width: calc(100% / {{ section.settings.per_row }} - 20px);
}

#DP--{{ section.id }} .dsgn-pck__inner-content {
  height: 100%;
  display: flex;
  gap: 10px;
  padding: 10px;
  position: relative;
  overflow: hidden;
  flex-direction: column;
  justify-content: center;
  text-align: center;
}

#DP--{{ section.id }} .dsgn-pck__absolute-link {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0;
  z-index: 2;
}

#DP--{{ section.id }} .dsgn-pck__text-wrapper {
  text-align: center;
  flex: 1 1 100%;
}

#DP--{{ section.id }} .dsgn-pck__heading {
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.01 }});
  margin-bottom: 0;
  color: {{ section.settings.heading_color }};
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--heading-font);
  font-weight: var(--heading-font-weight);
  font-style: var(--heading-font-style);
  {%- endif -%}
  display: inline-block;
}

#DP--{{ section.id }} .dsgn-pck__small-heading {
  color: {{ section.settings.text_color }};
  line-height: calc(3px + 2ex + 3px);
  font-size: calc(var(--dp-g-small-heading-size, var(--dp-small-heading-size, 24px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
    font-family: var(--heading-font);
    font-weight: var(--heading-font-weight);
    font-style: var(--heading-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__small-heading + .dsgn-pck__text {
  margin-top: 10px;
}

#DP--{{ section.id }} .dsgn-pck__text p {
  line-height: calc(3px + 2ex + 3px);
  color: {{ section.settings.text_color }};
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phone to portrait tablet */
@media (max-width: 767px) {

  #DP--{{ section.id }} .dsgn-pck__item {
    width: 100%;
  }

  #DP--{{ section.id }} .dsgn-pck__inner-content {
    padding: 1em 2em;
  }
}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin | divided_by: 2 }}px;
    margin-bottom: {{ section.settings.outer_margin | divided_by: 2 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__sizer {
    min-width: 100%;
    padding-top: {{ section.settings.inner_padding | divided_by: 2 }}px;
    padding-bottom: {{ section.settings.inner_padding | divided_by: 2 }}px;
  }

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck__value-prop-numbers dsgn-pck__section">
  <div class="dsgn-pck__sizer">
    <div class="dsgn-pck__icons">
      {%- for block in section.blocks -%}
        <div id="DP--{{ block.id }}" class="dsgn-pck__item dsgn-pck__item dsgn-pck__block-{{ block.id }}" {{ block.shopify_attributes }}>
          <div class="dsgn-pck__inner-content">
            {%- if block.settings.link != blank -%}
              <a class="dsgn-pck__absolute-link" href="{{ block.settings.link }}">{{ block.settings.link.title }}</a>
            {% endif %}
            {%- if block.settings.image != blank -%}
              <style>
                #DP--{{ block.id }} .dsgn-pck__image__wrapper {
                  width: {{ block.settings.icon_size }}%;
                  display: block;
                  margin: auto;
                }
              </style>
              <div class="dsgn-pck__image__wrapper">
                <svg viewBox="0 0 {{ block.settings.image.width }} {{ block.settings.image.height }}"></svg>
                {%- capture sizes -%}
                  (max-width: 480px) 70vw, {{ section.settings.base_width | divided_by: section.settings.per_row | append: 'vw' | default: '33vw' }}
                {%- endcapture -%}
                {{ block.settings.image | image_url: width: 1000 | image_tag: loading: 'lazy', widths: widths, sizes: sizes }}
              </div>
            {%- endif -%}
            {%- if block.settings.count_end != blank -%}
              <h2 class="dsgn-pck__number-wrapper dsgn-pck__heading">
                {%- if block.settings.currency_symbol != blank -%}
                  <span class="dsgn-pck__currency-symbol">{{- block.settings.currency_symbol -}}</span>
                {%- endif -%}
                <span class="dsgn-pck__number dsgn-pck__number--{{ block.id }}"
                  data-dsgn-pck-count
                  data-dsgn-pck-count-start="{{ block.settings.count_start | default: 0 }}"
                  data-dsgn-pck-count-end="{{ block.settings.count_end }}"></span>
                <span class="dsgn-pck__append">{{ block.settings.number_append }}</span>
                </h2>
            {%- endif -%}
            <div class="dsgn-pck__text-wrapper">
              {%- if block.settings.heading != blank -%}
                <h3 class="dsgn-pck__small-heading">
                  {{ block.settings.heading }}
                </h3>
              {%- endif -%}
              {%- if block.settings.text != blank -%}
                <div class="dsgn-pck__text dsgn-pck__rte">
                  {{ block.settings.text }}
                </div>
              {%- endif -%}
            </div>
          </div>
        </div>
      {%- endfor -%}
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "Value icons - numbers",
  "class": "DP__value-prop-numbers",
  "settings": [
    {
      "type": "range",
      "id": "counter_speed",
      "min": 1,
      "max": 10,
      "unit": "sec",
      "label": "Count speed",
      "default": 3
    },
    {
      "type": "range",
      "id": "per_row",
      "label": "Items per row",
      "default": 3,
      "min": 2,
      "max": 6
    },
    {
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 80,
      "max": 150,
      "step": 5,
      "default": 100,
      "unit": "%"
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Numbers",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#666666"
    },
    {
      "type": "color_background",
      "id": "background_color",
      "label": "Background",
      "default": "linear-gradient(180deg, rgba(255, 255, 255, 1), rgba(255, 255, 255, 1) 100%)"
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
    {
      "type": "range",
      "id": "base_width",
      "label": "Size",
      "min": 80,
      "max": 100,
      "step": 5,
      "default": 95,
      "unit": "%"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint for content."
    },
    {
      "type": "range",
      "id": "inner_padding",
      "label": "Inner padding",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 40,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin",
      "label": "Outer margin",
      "info": "Only applies to top and bottom.",
      "min": 0,
      "max": 100,
      "default": 0,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "html",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "html",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": false
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    }
  ],
  "blocks": [
    {
      "type": "icon",
      "name": "Icon",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Icon"
        },
        {
          "type": "range",
          "id": "icon_size",
          "label": "Icon size",
          "default": 40,
          "min": 20,
          "max": 100,
          "step": 5,
          "unit": "%"
        },
        {
          "type": "text",
          "id": "currency_symbol",
          "label": "Currency symbol (optional)"
        },
        {
          "type": "number",
          "id": "count_end",
          "label": "End number",
          "default": 100
        },
        {
          "type": "number",
          "id": "count_start",
          "label": "Start number (optional)",
          "info": "Defaults to 0 if left blank, but can be a larger number to countdown vs up to the end number"
        },
        {
          "type": "text",
          "id": "number_append",
          "label": "Text after number - eg. hrs, yards (optional)"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "Text"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Icon link (optional)"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Value icons - numbers 🎒",
      "blocks": [
        {
          "type": "icon",
          "settings": {
            "currency_symbol": "$",
            "count_end": 20000,
            "heading": "Money raised",
            "text": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>"
          }
        },
        {
          "type": "icon",
          "settings": {
            "count_end": 360,
            "heading": "Hours worked",
            "text": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>"
          }
        },
        {
          "type": "icon",
          "settings": {
            "count_end": 5000,
            "number_append": "+",
            "heading": "Donations",
            "text": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>"
          }
        }
      ]
    }
  ]
}
{% endschema %}
{%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "counter_speed": {{ section.settings.counter_speed | times: 1000 | json }}
  }
</script>
{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}" type="module" defer>
(function(){

  const designPack = {
    settings: {},
    animateNumbers: function(entries, observer){
      function counter(elem, start, end, duration) {
        let current = start;
        let range = end - start;
        let incrementValue = Math.ceil(range * 0.01);
        let countup = end > start ? true : false;
        let remainder = range / incrementValue;
        let step = Math.abs(duration / remainder);
        let timer = setInterval(() => {
          current += incrementValue;
          elem.textContent = current;
          if ((current >= end && countup) || (current <= end && !countup)) {
            clearInterval(timer);
            elem.textContent = end;
          }
        }, step);
      }

      designPack.settings.numbers.forEach(function(elem){
        const start = parseInt(elem.dataset.dsgnPckCountStart);
        const end = parseInt(elem.dataset.dsgnPckCountEnd);
        counter(elem, start, end, designPack.settings.counter_speed);
      });

      // Run animation only once
      entries.forEach(entry => {
        if (entry.intersectionRatio > 0) {
          observer.unobserve(entry.target);
        }
      });
    },
    load: function(section){
      designPack.settings.numbers = section.querySelectorAll('[data-dsgn-pck-count]');

      const options = {
        root: null,
        rootMargin: '0px',
        threshold: [0, 0.25, 0.5, 0.75, 1]
      };
      // Construct Intersection Observer.
      const observer = new IntersectionObserver( this.animateNumbers, options );
      // Observe if element is present.
      if (section) {
        observer.observe(section);
      }

    },
    unload: function(section){
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
