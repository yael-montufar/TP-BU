{%- comment -%}
{
  "pack_name": "Banner - video background",
  "pack_author": "Design Packs"
}
{%- endcomment -%}

{% comment %} Security Code - hides section when app uninstalled {% endcomment %}
{%- unless content_for_header contains 'design_packs_file.js' -%}
  {%- if request.design_mode -%}
    <div class="dsgn-pck__no-app-warning">
      <div class="dsgn-pck__no-app-warning-background">
      </div>
      <div class="dsgn-pck__no-app-warning-text dsgn-pck__rte">
        <p><strong>WARNING!</strong> This premium section will not display properly without an active subscription for <a href="https://apps.shopify.com/design-packs" target="_blank" rel="nofollow">Design Packs</a>. If you need any support please email <a href="mailto:info@design-packs.com" target="_blank">info@design-packs.com</a> with your questions.</p>
      </div>
    </div>
  {%- endif -%}
  {%- break -%}
{%- endunless -%}

{%- comment -%} Images: check image crop aspect ratio {%- endcomment -%}
{%- if section.settings.image_crop == 'none' -%}
  {%- assign image_crop_width = section.settings.aspect_ratio | split: ':' | first | times: 1000 -%}
  {%- assign image_crop_height = section.settings.aspect_ratio | split: ':' | last | times: 1000 -%}
{%- else -%}
  {%- assign image_crop_width = section.settings.image_crop | split: ':' | first | times: 1000 -%}
  {%- assign image_crop_height = section.settings.image_crop | split: ':' | last | times: 1000 -%}
{%- endif -%}

{% comment %} Images: responsive image widths {% endcomment %}
{%- assign widths = '180, 360, 540, 720, 900, 1080, 1296, 1512, 1728, 1950, 2100, 2260, 2450, 2700, 3000, 3350, 3750, 4100' -%}

{%- comment -%} Layout: has user entered measurement value into max-width field? {%- endcomment -%}
{%- if section.settings.max_width contains 'px' or section.settings.max_width contains '%' -%}
  {%- assign max_width = section.settings.max_width -%}
{%- else -%}
  {%- assign max_width = section.settings.max_width | append: 'px' -%}
{%- endif -%}

{%- comment -%} Text: check text position {%- endcomment -%}
{%- assign horizontal_text_position = section.settings.text_position | split: ' ' | first -%}
{%- assign vertical_text_position = section.settings.text_position | split: ' ' | last -%}

{%- comment -%} Text: custom font_picker values {%- endcomment -%}
{%- capture font_settings_list -%}
{{ section.settings.main_font | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.main_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_face: font_display: 'swap' }}~
{{ section.settings.heading_font | font_modify: 'style', 'italic' | font_modify: 'weight', 'bolder' | font_face: font_display: 'swap' }}
{%- endcapture -%}
{%- assign font_array = font_settings_list | split: '~' -%}

{%- capture minify -%}
{%- comment -%} CSS {%- endcomment -%}
<style>
{%- if section.settings.override_theme_font != blank -%}
  {%- for font in font_array -%}
    {%- unless font contains 'error' -%}{{ font }}{%- endunless -%}
  {%- endfor -%}
  #DP--{{ section.id }} {
    --main-font: {{ section.settings.main_font.family }}, {{ section.settings.main_font.fallback_families }};
    --main-font-weight: {{ section.settings.main_font.weight }};
    --main-font-style: {{ section.settings.main_font.style }};
    --heading-font: {{ section.settings.heading_font.family }}, {{ section.settings.heading_font.fallback_families }};
    --heading-font-weight: {{ section.settings.heading_font.weight }};
    --heading-font-style: {{ section.settings.heading_font.style }};
  }
{%- endif -%}

#DP--{{ section.id }} {
  margin-top: {{ section.settings.outer_margin_top }}px;
  margin-bottom: {{ section.settings.outer_margin_bottom }}px;
}

#DP--{{ section.id }} .dsgn-pck__sizer {
  width: 90%;
  margin: auto;
  max-width: {{ max_width }};
}

#DP--{{ section.id }} .dsgn-pck__background {
  width: 100%;
}

#DP--{{ section.id }} .dsgn-pck__background-image::before {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  z-index: 1;
  background: {{ section.settings.image_overlay_color }};
}

#DP--{{ section.id }} .dsgn-pck__background-image video {
  object-fit: cover;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
  position: absolute;
}

#DP--{{ section.id }} .dsgn-pck__grid--main {
  height: 100%;
}

#DP--{{ section.id }} .dsgn-pck__content {
  z-index: 2;
  height: 100%;
  grid-template-columns: 1fr;
  grid-area: 1 / 1 / 2 / 2;
  padding: 5% 0;
}

#DP--{{ section.id }} .dsgn-pck__inner-content {
  z-index: 2;
  max-width: {{ section.settings.text_width }}px;
  width: 100%;
  padding: {%- if section.settings.text_background_color != blank -%}clamp(10px, 5%, 40px){%- endif -%};
  background: {{ section.settings.text_background_color }};
}

{% comment %} Block styling {% endcomment %}
#DP--{{ section.id }} .dsgn-pck__rte p,
#DP--{{ section.id }} .dsgn-pck__rte ul {
  line-height: calc(3px + 2.5ex + 3px);
  color: {{ section.settings.text_color }};
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
  {%- if section.settings.override_theme_font != blank -%}
  font-family: var(--main-font);
  font-weight: var(--main-font-weight);
  font-style: var(--main-font-style);
  {%- endif -%}
}

#DP--{{ section.id }} .dsgn-pck__small-text p,
#DP--{{ section.id }} .dsgn-pck__small-text ul {
  font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.008 }});
}

{%- if section.settings.text_alignment == 'center' -%}
  #DP--{{ section.id }} .dsgn-pck__rte ul {
    display: table;
    margin: 0 auto;
    text-align: left;
  }
{%- elsif section.settings.text_alignment == 'right' -%}
  #DP--{{ section.id }} .dsgn-pck__rte ul {
    display: table;
    margin-left: auto;
    text-align: left;
  }
{%- endif -%}

#DP--{{ section.id }} .dsgn-pck__block {
  color: {{ section.settings.text_color }};
}

#DP--{{ section.id }} .dsgn-pck__block + .dsgn-pck__block {
  margin-top: 15px;
}
{% comment %} End block styling {% endcomment %}

/* Animation */
{%- if section.settings.animation != 'none' -%}
  #DP--{{ section.id }}.dsgn-pck__animation-applied [style*="--dsgn-pck-animate"] {
    animation-name: dsgn-pck__animation--{{ section.settings.animation }};
  }
{%- else -%}
  #DP--{{ section.id }} [style*="--dsgn-pck-animate"] {
    opacity: 1;
  }
{% endif %}

{%- if section.settings.custom_css != blank -%}
  {%- assign custom_section_declarations = section.settings.custom_css | split: '}' -%}
  {%- for declaration in custom_section_declarations -%}
    {%- if declaration contains '{' -%}
      #DP--{{ section.id }} {{ declaration }} }
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}

/* Landscape phones and down */
@media (max-width: 480px) {
  #DP--{{ section.id }} {
    margin-top: {{ section.settings.outer_margin_top | divided_by: 2 }}px;
    margin-bottom: {{ section.settings.outer_margin_bottom | divided_by: 2 }}px;
  }

  #DP--{{ section.id }} .dsgn-pck__inner-content {
    min-width: 100%;
  }

  {%- if section.settings.mobile_aspect_ratio != blank -%}
    #DP--{{ section.id }} .dsgn-pck__background-image .dsgn-pck__svg-sizer {
      aspect-ratio: {{ section.settings.mobile_aspect_ratio | replace: ':', ' / '}};
    }
  {%- endif -%}

  {%- if section.settings.mobile_custom_css != blank -%}
    {%- assign mobile_custom_declarations = section.settings.mobile_custom_css | split: '}' -%}
    {%- for declaration in mobile_custom_declarations -%}
      {%- if declaration contains '{' -%}
        #DP--{{ section.id }} {{ declaration }} }
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
}
</style>

{%- comment -%} HTML {%- endcomment -%}
<section id="DP--{{ section.id }}" class="DP--{{ section.id }} dsgn-pck__banner-video dsgn-pck__section">
  <div class="dsgn-pck__background">
    {%- if section.settings.link != blank -%}
      <a class="dsgn-pck__absolute-link" href="{{ section.settings.link }}">{{ section.settings.link.title }}</a>
    {% endif %}
    <div class="dsgn-pck__image__wrapper dsgn-pck__background-image">
      <svg class="dsgn-pck__svg-sizer" viewBox="0 0 {{ image_crop_width }} {{ image_crop_height }}"></svg>
      {%- assign video = section.settings.video -%}
      <video width="{{ video.aspect_ratio | times: 100 }}" height="100" autoplay muted playsinline loading="lazy" {% if section.settings.loop %}loop{% endif %} poster="{{ video.preview_image | image_url: width: 2800 }}">
        {%- for source in video.sources -%}
          <source src="{{ source.url }}">
        {%- endfor -%}
      </video>
      <div class="dsgn-pck__sizer dsgn-pck__grid dsgn-pck__grid--main">
        <div class="dsgn-pck__content
                    dsgn-pck__flex dsgn-pck__justify-{{ horizontal_text_position }}
                    dsgn-pck__align-{{ vertical_text_position }}
                    dsgn-pck__text-alignment-{{ section.settings.text_alignment }}">
          {%- if section.settings.link != blank -%}
            <a class="dsgn-pck__absolute-link" href="{{ section.settings.link }}">{{ section.settings.background_image.alt }}</a>
          {% endif %}
          <div class="dsgn-pck__inner-content dsgn-pck__relative">
            {%- for block in section.blocks -%}
              <div id="DP--{{ block.id }}" class="dsgn-pck__block dsgn-pck__block-id-{{ block.id }} dsgn-pck__block--{{ block.type }} dsgn-pck__block--{{ forloop.index }}" {{ block.shopify_attributes }} style="--dsgn-pck-animate: {{ forloop.index }};">
                {%- case block.type -%}
                  {%- when '@app' -%}
                    {% render block %}
                  {%- when 'spacer' -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__spacer {
                        height: {{ block.settings.size }}px;
                        display: block !important;
                      }
                      @media (max-width: 480px) {
                        .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__spacer {
                          height: {{ block.settings.size | times: 0.75 | round: 0 }}px;
                        }
                      }
                    </style>
                    <div class="dsgn-pck__spacer" aria-hidden="true"></div>
                  {%- when 'video' -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} video {
                        width: 100%    !important;
                        height: auto   !important;
                      }
                    </style>
                    <div class="dsgn-pck__video__wrapper">
                      {%- assign video = block.settings.video -%}
                      <video width="{{ video.aspect_ratio | times: 100 }}" height="100"
                        {% if block.settings.autoplay %}autoplay playsinline muted{% endif %}
                        {% if block.settings.loop %}loop{% endif %}
                        {% if block.settings.show_controls %}controls{% endif %}
                        loading="lazy" poster="{{ video.preview_image | image_url: width: 2800 }}">
                        {%- for source in video.sources -%}
                          <source src="{{ source.url }}">
                        {%- endfor -%}
                      </video>
                    </div>
                  {%- when 'newsletter' -%}
                    <style>
                      {%- assign button_alpha = block.settings.button_background_color | color_extract: 'alpha' -%}

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form {
                        --form-gap: 5px;
                        width: 100%;
                        display: flex;
                        flex-wrap: wrap;
                        gap: calc(var(--form-gap) * 2);
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form-text {
                        color: inherit;
                        font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form input {
                        margin: unset;
                        padding: 0.8em;
                        font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form input[type="text"],
                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__form input[type="email"] {
                        padding: 0.8em;
                        background: transparent;
                        border: thin solid {{ section.settings.text_color }};
                        color: {{ section.settings.text_color }};
                        {%- if section.settings.override_theme_font != blank -%}
                        font-family: var(--main-font);
                        font-weight: var(--main-font-weight);
                        font-style: var(--main-font-style);
                        {%- endif -%}
                      }

                      .dsgn-pck__form--{{ block.id }} input {
                        width: 100%;
                      }

                      {%- if block.settings.show_first_name and block.settings.show_last_name -%}
                        .dsgn-pck__form--{{ block.id }}-compact .dsgn-pck__newsletter_first-name,
                        .dsgn-pck__form--{{ block.id }}-compact .dsgn-pck__newsletter_last-name {
                          width: calc(50% - var(--form-gap));
                        }
                      {%- endif -%}

                      .dsgn-pck__form--{{ block.id }}-compact .dsgn-pck__newsletter_email {
                        width: calc(70% - var(--form-gap));
                      }

                      .dsgn-pck__form--{{ block.id }}-compact .dsgn-pck__button {
                        width: calc(30% - var(--form-gap));
                      }

                      .dsgn-pck__block-id-{{ block.id }} input::placeholder {
                        opacity: 0.6;
                        color: {{ section.settings.text_color }};
                        {%- if section.settings.override_theme_font != blank -%}
                        font-family: var(--main-font);
                        font-weight: var(--main-font-weight);
                        font-style: var(--main-font-style);
                        {%- endif -%}
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button {
                        justify-content: center;
                        text-align: center;
                        transition: all 0.3s ease-in-out;
                        border: thin solid;
                        border-radius: {{ block.settings.button_radius }}px;
                        color: {{ block.settings.button_label_color }};
                        font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
                        border-color: {%- if button_alpha != 0 -%}{{ block.settings.button_background_color }}{%- else -%}{{ block.settings.button_label_color }}{%- endif -%};
                        background-color: {{ block.settings.button_background_color }};
                        {%- if section.settings.override_theme_font != blank -%}
                        font-family: var(--main-font);
                        font-weight: var(--main-font-weight);
                        font-style: var(--main-font-style);
                        {%- endif -%}
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button:hover {
                        opacity: 1;
                        {%- if button_alpha != 0 -%}
                        background-color: {{ block.settings.button_background_color | color_darken: 10 }};
                        border-color: transparent;
                        {%- else -%}
                        background-color: {{ block.settings.button_label_color | color_modify: 'alpha', 0.1 }}
                        {%- endif -%};
                      }
                    </style>
                    {%- capture form_id -%}dsgn-pck__form-{{ section.id }}{%- endcapture -%}
                    {%- form 'customer', id: form_id -%}

                      {%- comment -%} Error and success messages for submitted form {%- endcomment -%}
                      <div class="dsgn-pck__form-response dsgn-pck__text">
                        {%- if form.posted_successfully? -%}
                          <p class="dsgn-pck__form-reply--success">{{ 'success' | t }}</p>
                        {%- elsif form.errors -%}
                          {%- for field in form.errors -%}
                            <p class="dsgn-pck__form-reply--error">{{ field }} - {{ form.errors.messages[field] }}</p>
                          {%- endfor -%}
                        {%- endif -%}
                      </div>

                      {%- comment -%} Hidden newsletter fields {%- endcomment -%}
                      <input type="hidden" name="contact[tags]" value="newsletter"/>
                      <input type="hidden" name="challenge" value="false" />

                      <div class="dsgn-pck__form dsgn-pck__form--{{ block.id }} dsgn-pck__form--{{ block.id }}-{{ block.settings.layout }}">
                        {%- if block.settings.show_first_name -%}
                          <label class="dsgn-pck__visually-hidden" for="first-name-{{ block.id }}">{{ block.settings.first_name_label }}</label>
                          <input class="dsgn-pck__newsletter_first-name" type="text" name="contact[first_name]" id="first-name-{{ block.id }}" placeholder="{{ block.settings.first_name_label }}" />
                        {%- endif -%}
                        {%- if block.settings.show_last_name -%}
                          <label class="dsgn-pck__visually-hidden" for="last-name-{{ block.id }}">{{ block.settings.last_name_label }}</label>
                          <input class="dsgn-pck__newsletter_last-name" type="text" name="contact[last_name]" id="last-name-{{ block.id }}" placeholder="{{ block.settings.last_name_label }}" />
                        {%- endif -%}
                        <label class="dsgn-pck__visually-hidden" for="email-{{ block.id }}">{{ block.settings.email_label }}</label>
                        <input class="dsgn-pck__newsletter_email" type="email" name="contact[email]" required id="email-{{ block.id }}" placeholder="{{ block.settings.email_label }}" />
                        <input class="dsgn-pck__button" type="submit" value="{{ block.settings.submit_label }}" />
                      </div>

                    {%- endform -%}
                  {%- when 'liquid' -%}
                    {{ block.settings.liquid }}
                  {%- when 'list' -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__list {
                        margin: 0;
                        {%- case block.settings.list_style -%}
                          {%- when 'decimal' -%}
                            list-style: decimal;
                          {%- when 'square' -%}
                            list-style: square;
                          {%- when 'circle' -%}
                            list-style: circle;
                          {%- else -%}
                            list-style: inherit;
                        {%- endcase -%}
                      }
                    </style>
                    {%- assign list = block.settings.text | split: '**' -%}
                    <div class="dsgn-pck__list-wrapper dsgn-pck__rte">
                      <ul class="dsgn-pck__list dsgn-pck__text-alignment-left">
                        {%- for list_item in list -%}
                          {%- if forloop.first == false -%}
                            <li>{{ list_item }}</li>
                          {%- endif -%}
                        {%- endfor -%}
                      </ul>
                    </div>
                  {%- when 'icons' -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icons {
                        gap: {{ block.settings.gap }}px;
                        align-items: flex-start;
                        flex-wrap: wrap;
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon {
                        text-align: center;
                        flex-basis: calc({{ block.settings.icon_width }}% - {{ block.settings.gap | divided_by: 2.0 }}px);
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon a,
                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon p {
                        color: {{ section.settings.text_color }};
                        line-height: 1.2;
                        margin: 0;
                        text-decoration: none;
                        font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.007 }});
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon img {
                        width: {{ block.settings.image_size }}%;
                        height: auto;
                        display: inline-block;
                      }

                      @media (max-width: 480px) {
                        .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__icon {
                          flex-grow: 1;
                        }
                      }
                    </style>
                    <div class="dsgn-pck__flex dsgn-pck__icons dsgn-pck__justify-{{ section.settings.text_alignment }}">
                      {%- for index in (1..4) -%}
                        {%- capture icon -%}icon_{{ forloop.index }}{%- endcapture -%}
                        {%- capture text -%}text_{{ forloop.index }}{%- endcapture -%}
                        {%- capture link -%}link_{{ forloop.index }}{%- endcapture -%}
                        {%- if block.settings[icon] != blank -%}
                          <div class="dsgn-pck__flex-item dsgn-pck__icon dsgn-pck__rte">
                            {%- if block.settings[link] != blank -%}
                              <a href="{{ block.settings[link] }}">
                            {%- endif -%}
                              {%- capture sizes -%}
                                (max-width: 480px) calc(100vw / {{ block.settings.icon_width }}), calc({{ section.settings.text_width | default: 50 }}vw / {{ block.settings.icon_width }})
                              {%- endcapture -%}
                              {{ block.settings[icon] | image_url: width: block.settings[icon].width | image_tag: loading: 'lazy', widths: widths, sizes: sizes }}
                              <p class="dsgn-pck__icon-text">
                                {{ block.settings[text] }}
                              </p>
                            {%- if block.settings[link] != blank -%}
                              </a>
                            {%- endif -%}
                          </div>
                        {%- endif -%}
                      {%- endfor -%}
                    </div>
                  {%- when 'text_columns' -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__columns {
                        gap: {{ block.settings.gap }}px;
                      }
                    </style>
                    <div class="dsgn-pck__flex dsgn-pck__columns dsgn-pck__flex--2-per-row dsgn-pck__justify-{{ block.settings.text_alignment }}">
                      {%- for index in (1..2) -%}
                        {%- capture heading -%}heading_{{ forloop.index }}{%- endcapture -%}
                        {%- capture column -%}column_{{ forloop.index }}{%- endcapture -%}
                        <div class="dsgn-pck__flex-item">
                          {%- if block.settings[heading] != blank -%}
                            <h3 class="dsgn-pck__small-heading dsgn-pck__column-heading">{{ block.settings[heading] }}</h3>
                          {%- endif -%}
                          {%- if block.settings[column] != blank -%}
                            <div class="dsgn-pck__rte">
                              {{ block.settings[column] }}
                            </div>
                          {%- endif -%}
                      </div>
                      {%- endfor -%}
                    </div>
                  {%- when 'countdown_timer' -%}
                    {%- comment -%} Schedule: timezone value {%- endcomment -%}
                    {%- assign timezone = block.settings.timezone | split: '~' | first | strip -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock-wrap {
                        max-width: 450px;
                        flex: 1 0 auto;
                        margin: 0 auto;
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__clock {
                        grid-template-columns: repeat(4, minmax(0, 1fr));
                        text-transform: uppercase;
                        font-weight: bold;
                        letter-spacing: 1px;
                        {%- if section.settings.override_theme_font != blank -%}
                        font-family: var(--main-font);
                        font-weight: var(--main-font-weight);
                        font-style: var(--main-font-style);
                        {%- endif -%}
                        color: {{ section.settings.text_color }};
                        border: thin solid {{ section.settings.text_color }};
                        font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__measurement {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        padding: 8px 20px;
                        border-left: thin solid {{ section.settings.text_color }};
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__measurement:first-child {
                        border-left: none;
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__number {
                        width: 100%;
                        text-align: center;
                        font-weight: bold;
                        padding: 5px 0;
                        font-size: 1.5em;
                        min-height: 2em;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__label {
                        font-size: clamp(9px, 0.5em, 45px);
                        padding: 0.5em 0.8em;
                      }
                    </style>
                    <div class="dsgn-pck__clock-wrap"
                      data-timer-start="{{ block.settings.start_month }} {{ block.settings.start_day }} {{ block.settings.start_year }} {{ block.settings.start_time }} {{ timezone }}"
                      data-timer-end="{{ block.settings.end_month }} {{ block.settings.end_day }} {{ block.settings.end_year }} {{ block.settings.end_time }} {{ timezone }}">
                        <div class="dsgn-pck__clock dsgn-pck__grid">
                          <div class="dsgn-pck__measurement dsgn-pck__days">
                            <span class="dsgn-pck__number">--</span>
                            <span class="dsgn-pck__label">{{ 'days' | t }}</span>
                          </div>
                          <div class="dsgn-pck__measurement dsgn-pck__hours">
                            <span class="dsgn-pck__number">--</span>
                            <span class="dsgn-pck__label">{{ 'hours' | t }}</span>
                          </div>
                          <div class="dsgn-pck__measurement dsgn-pck__minutes">
                            <span class="dsgn-pck__number">--</span>
                            <span class="dsgn-pck__label">{{ 'minutes' | t }}</span>
                          </div>
                          <div class="dsgn-pck__measurement dsgn-pck__seconds">
                            <span class="dsgn-pck__number dsgn-pck__seconds">--</span>
                            <span class="dsgn-pck__label dsgn-pck__seconds-text">{{ 'seconds' | t }}</span>
                          </div>
                        </div>
                    </div>
                  {%- when 'inset_image' -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__image__wrapper {
                        width: {{ block.settings.inset_image_size }}%;
                        display: inline-block;
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__image__wrapper svg {
                        width: 100%;
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__image__wrapper path {
                        fill: {{ section.settings.text_color }};
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__item img {
                        width: 100%;
                        object-fit: contain;
                      }
                    </style>
                    {%- capture placeholder_image -%}
                      <svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.651 12.851c-2.13 1.94-5.17 2.91-9.07 2.91-.91 0-1.87-.04-2.88-.17-.38.86-.6 1.71-.6 2.51 0 .55-.45 1-1 1s-1-.45-1-1c0-.24.01-.48.04-.72.02-.13.03-.26.06-.39.18-1.13.64-2.27 1.29-3.39 2.32-4.02 9.3-8.68 12.61-9.5-4.76-.03-12 3-13.91 6.93 0-2.89 2.3-6.42 5.46-8.38 4.54-2.82 10.47-1.14 12.06 0 .23.16.37.42.38.7.08 2.31-.25 6.62-3.44 9.5z" fill="#5C5F62"/></svg>
                    {%- endcapture -%}
                    <div class="dsgn-pck__inset-image dsgn-pck__flex dsgn-pck__justify-{%- if block.settings.image_alignment != 'default' -%}{{ block.settings.image_alignment }}{%- else -%}{{ section.settings.text_alignment }}{%- endif -%}">
                      {%- if block.settings.inset_image != blank -%}
                        <div class="dsgn-pck__image__wrapper">
                          <svg viewBox="0 0 {{ block.settings.inset_image.width }} {{ block.settings.inset_image.height }}"></svg>
                          {%- capture sizes -%}
                            (max-width: 480px) {{ block.settings.inset_image_size }}vw,(max-width: 767px) {{ block.settings.inset_image_size }}vw, {{ 0.5 | times: block.settings.inset_image_size | divided_by: 100.0 | times: 100.0 | round }}vw
                          {%- endcapture -%}
                          {{ block.settings.inset_image | image_url: width: 1000 | image_tag: loading: 'lazy', widths: widths, sizes: sizes }}
                        </div>
                      {%- else -%}
                        <div class="dsgn-pck__image__wrapper">
                          {{ placeholder_image | strip }}
                        </div>
                      {%- endif -%}
                    </div>
                  {%- when 'divider' -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} {
                        padding-top: {{ block.settings.padding_top }}px;
                        padding-bottom: {{ block.settings.padding_bottom }}px;
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__divider {
                        height: 0;
                        border: none;
                        background: transparent;
                        {%- if section.settings.text_alignment == 'left' -%}
                          margin: 0;
                        {%- elsif section.settings.text_alignment == 'right' -%}
                          margin: 0 0 0 auto;
                        {%- else -%}
                          margin: 0 auto;
                        {%- endif -%}
                        width: {{ block.settings.base_width }}%;
                        border-top: {{ block.settings.thickness }}px {{ block.settings.style }} {{ block.settings.divider_color }};
                      }
                    </style>
                    <hr class="dsgn-pck__divider" aria-hidden="true">

                  {%- when 'small_text' -%}
                    {%- if block.settings.small_text != blank -%}
                      <div class="dsgn-pck__small-text dsgn-pck__rte">
                        {{ block.settings.small_text }}
                      </div>
                    {%- endif -%}
                  {%- when 'heading' -%}
                      <style>
                        {%- assign block_heading_alpha = block.settings.block_heading_color | color_extract: 'alpha' -%}

                        .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__heading {
                          margin: 0;
                          line-height: calc(3px + 2ex + 3px);
                          {%- if block_heading_alpha != 0 -%}
                            color: {{ block.settings.block_heading_color }};
                          {%- endif -%}
                          {%- if block.settings.block_heading_size != blank -%}
                            font-size: calc({{ block.settings.block_heading_size }} * {{ section.settings.text_size | times: 0.01 }});
                          {%- else -%}
                            font-size: calc(var(--dp-g-heading-size, var(--dp-heading-size, 35px)) * {{ section.settings.text_size | times: 0.01 }});
                          {%- endif -%}
                          {%- if section.settings.override_theme_font != blank -%}
                          font-family: var(--heading-font);
                          font-weight: var(--heading-font-weight);
                          font-style: var(--heading-font-style);
                          {%- endif -%}
                        }

                        @media (max-width: 480px) {
                          .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__heading {
                            {%- if block.settings.block_heading_size != blank -%}
                              font-size: min({{ block.settings.block_heading_size }}, 50px);
                            {%- endif -%}
                          }
                        }

                      </style>
                      {%- if block.settings.title != blank -%}
                        <{{- block.settings.heading_level }} class="dsgn-pck__heading">
                          {{ block.settings.title | newline_to_br }}
                        </{{- block.settings.heading_level -}}>
                      {%- endif -%}

                  {%- when 'text' -%}
                    <style>
                      .dsgn-pck__block-id-{{ block.id }} p,
                      .dsgn-pck__block-id-{{ block.id }} ul {
                        line-height: calc(3px + 2.5ex + 3px);
                        color: {{ section.settings.text_color }};
                        font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
                        {%- if section.settings.override_theme_font != blank -%}
                        font-family: var(--main-font);
                        font-weight: var(--main-font-weight);
                        font-style: var(--main-font-style);
                        {%- endif -%}
                      }

                      {%- if section.settings.text_alignment == 'center' -%}
                        .dsgn-pck__block-id-{{ block.id }} ul {
                          display: table;
                          margin: 0 auto;
                          text-align: left;
                        }
                      {%- elsif section.settings.text_alignment == 'right' -%}
                        .dsgn-pck__block-id-{{ block.id }} ul {
                          display: table;
                          margin-left: auto;
                          text-align: left;
                        }
                      {%- endif -%}
                    </style>
                    {%- if block.settings.text != blank -%}
                      <div class="dsgn-pck__text dsgn-pck__rte">
                        {{ block.settings.text }}
                      </div>
                    {%- endif -%}
                  {%- when 'buttons' -%}
                    <style>
                      {%- assign button_alpha_primary = block.settings.button_background_color_primary | color_extract: 'alpha' -%}
                      {%- assign button_alpha_secondary = block.settings.button_background_color_secondary | color_extract: 'alpha' -%}

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-area {
                        display: grid;
                        grid-gap: 1.3em;
                        {%- if section.settings.text_alignment == 'center' -%}
                          margin: 0 auto;
                        {%- elsif section.settings.text_alignment == 'right' -%}
                          margin: 0 0 0 auto;
                        {%- endif -%}
                        {%- if block.settings.button_label_primary != blank and block.settings.button_label_secondary != blank -%}
                          grid-template-columns: repeat(2, 1fr);
                        {%- else -%}
                          grid-template-columns: 1fr;
                          max-width: 200px;
                        {%- endif -%}
                        max-width: 100%;
                        width: fit-content;
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button {
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        text-align: center;
                        text-decoration: none;
                        padding: 0.5em 1.2em;
                        margin-top: 0;
                        border: thin solid;
                        transition: all 0.3s ease-in-out;
                        border-radius: {{ block.settings.button_radius }}px;
                        line-height: calc(3px + 2ex + 3px);
                        font-size: calc(var(--dp-g-body-size, var(--dp-body-size, 18px)) * {{ section.settings.text_size | times: 0.01 }});
                        {%- if section.settings.override_theme_font != blank -%}
                        font-family: var(--main-font);
                        font-weight: var(--main-font-weight);
                        font-style: var(--main-font-style);
                        {%- endif -%}
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-primary {
                        color: {{ block.settings.button_label_color_primary }};
                        border-color: {%- if button_alpha_primary != 0 -%}{{ block.settings.button_background_color_primary }}{%- else -%}{{ block.settings.button_label_color_primary }}{%- endif -%};
                        background-color: {{ block.settings.button_background_color_primary }};
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-secondary {
                        color: {{ block.settings.button_label_color_secondary }};
                        border-color: {%- if button_alpha_secondary != 0 -%}{{ block.settings.button_background_color_secondary }}{%- else -%}{{ block.settings.button_label_color_secondary }}{%- endif -%};
                        background-color: {{ block.settings.button_background_color_secondary }};
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-primary:hover {
                        opacity: 1;
                        {%- if button_alpha_primary != 0 -%}
                        background-color: {{ block.settings.button_background_color_primary | color_darken: 10 }};
                        border-color: transparent;
                        {%- else -%}
                        background-color: {{ block.settings.button_label_color_primary | color_modify: 'alpha', 0.1 }}
                        {%- endif -%};
                      }

                      .dsgn-pck__block-id-{{ block.id }} .dsgn-pck__button-secondary:hover {
                        opacity: 1;
                        {%- if button_alpha_secondary != 0 -%}
                        background-color: {{ block.settings.button_background_color_secondary | color_darken: 10 }};
                        border-color: transparent;
                        {%- else -%}
                        background-color: {{ block.settings.button_label_color_secondary | color_modify: 'alpha', 0.1 }}
                        {%- endif -%};
                      }

                      @media (max-width: 480px) {
                        .dsgn-pck__block-id-{{ block.id }} div.dsgn-pck__button-area {
                          grid-template-columns: 1fr;
                          width: 100%;
                          gap: 10px;
                        }
                      }
                    </style>
                    <div class="dsgn-pck__button-area {% if block.settings.button_label_primary != blank %}dsgn-pck__button-area--primary-active{% endif %}
                    {% if block.settings.button_label_secondary != blank %}dsgn-pck__button-area--secondary-active{% endif %}">
                      {%- if block.settings.button_label_primary != blank -%}
                        <a class="dsgn-pck__button dsgn-pck__button-primary" {%- if block.settings.link_primary != blank -%} href="{{ block.settings.link_primary }}" {%- endif -%} {% if block.settings.external_link_primary %}target="_blank"{% endif %}>{{ block.settings.button_label_primary }}</a>
                      {%- endif -%}
                      {%- if block.settings.button_label_secondary != blank -%}
                        <a class="dsgn-pck__button dsgn-pck__button-secondary" {%- if block.settings.link_secondary != blank -%}href="{{ block.settings.link_secondary }}"{%- endif -%} {% if block.settings.external_link_secondary %}target="_blank"{% endif %}>{{ block.settings.button_label_secondary }}</a>
                      {%- endif -%}
                    </div>
                {%- endcase -%}
              </div>
            {%- endfor -%}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
{%- endcapture -%}
{{ minify | strip_newlines }}

{% schema %}
{
  "name": "Banner - video background",
  "class": "DP__banner-video-background",
  "blocks": [
    {
      "type": "heading",
      "name": "Heading",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Attention-grabbing headline"
        },
        {
          "type": "header",
          "content": "🚨 Advanced"
        },
        {
          "type": "color",
          "id": "block_heading_color",
          "label": "Heading color"
        },
        {
          "type": "text",
          "id": "block_heading_size",
          "label": "Base text size",
          "info": "Set custom base size for heading. Leave empty to default to base size of 35px. Base size is affected by section text size setting."
        },
        {
          "type": "select",
          "id": "heading_level",
          "label": "Heading level",
          "options": [
            {
              "value": "h1",
              "label": "h1"
            },
            {
              "value": "h2",
              "label": "h2"
            },
            {
              "value": "h3",
              "label": "h3"
            },
            {
              "value": "h4",
              "label": "h4"
            },
            {
              "value": "h5",
              "label": "h5"
            },
            {
              "value": "h6",
              "label": "h6"
            }
          ],
          "default": "h2",
          "info": "The most important heading has the rank 1 (<h1>) and the least important heading has rank 6 (<h6>). Only use one h1 on a page."
        }
      ]
    },
    {
      "type": "spacer",
      "name": "Spacer",
      "settings": [
        {
          "type": "range",
          "id": "size",
          "label": "Spacing height",
          "min": 0,
          "max": 100,
          "default": 10,
          "unit": "px"
        }
      ]
    },
    {
      "type": "divider",
      "name": "Divider",
      "settings": [
        {
          "type": "range",
          "id": "base_width",
          "label": "Width",
          "min": 20,
          "max": 100,
          "step": 5,
          "default": 50,
          "unit": "%"
        },
        {
          "type": "range",
          "id": "thickness",
          "label": "Thickness",
          "min": 0,
          "max": 10,
          "default": 1,
          "unit": "px"
        },
        {
          "type": "select",
          "id": "style",
          "label": "Style",
          "default": "solid",
          "options": [
            {
              "value": "solid",
              "label": "Solid line"
            },
            {
              "value": "dotted",
              "label": "Dotted line"
            },
            {
              "value": "dashed",
              "label": "Dashed line"
            },
            {
              "value": "double",
              "label": "Double line"
            }
          ]
        },
        {
          "type": "header",
          "content": "🎨 Design"
        },
        {
          "type": "color",
          "id": "divider_color",
          "label": "Color",
          "default": "#FFFFFF"
        },
        {
          "type": "header",
          "content": "🖼 Layout"
        },
        {
          "type": "range",
          "id": "padding_top",
          "label": "Padding - top",
          "min": 0,
          "max": 100,
          "default": 40,
          "step": 5,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "padding_bottom",
          "label": "Padding - bottom",
          "min": 0,
          "max": 100,
          "default": 40,
          "step": 5,
          "unit": "px"
        }
      ]
    },
    {
      "type": "text",
      "name": "Regular text",
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "label": "Text",
          "default": "<p>Drag and drop block options like heading, text, buttons, dividers, and more.</p>"
        }
      ]
    },
    {
      "type": "small_text",
      "name": "Small text",
      "settings": [
        {
          "type": "richtext",
          "id": "small_text",
          "label": "Small text",
          "default": "<p>New arrivals</p>"
        }
      ]
    },
    {
      "type": "list",
      "name": "List",
      "settings": [
        {
          "type": "richtext",
          "id": "text",
          "label": "List items",
          "default": "<p>** Important point number one</p><p>** Next point in the list</p>",
          "info": "Use two asterisks (**) to create a new list item"
        },
        {
          "type": "select",
          "id": "list_style",
          "label": "Style",
          "options": [
            {
              "value": "decimal",
              "label": "Numbered"
            },
            {
              "value": "square",
              "label": "Square"
            },
            {
              "value": "circle",
              "label": "Circle outline"
            },
            {
              "value": "inherit",
              "label": "Disc (default)"
            }
          ],
          "default": "inherit"
        }
      ]
    },
    {
      "type": "buttons",
      "name": "Buttons",
      "settings": [
        {
          "type": "range",
          "id": "button_radius",
          "label": "Button border radius",
          "min": 0,
          "max": 50,
          "step": 5,
          "default": 0,
          "unit": "px"
        },
        {
          "type": "header",
          "content": "Primary button"
        },
        {
          "type": "text",
          "id": "button_label_primary",
          "label": "Primary button",
          "default": "Learn more"
        },
        {
          "type": "url",
          "id": "link_primary",
          "label": "Primary link"
        },
        {
          "type": "checkbox",
          "id": "external_link_primary",
          "label": "Open primary link in a new window"
        },
        {
          "type": "color",
          "id": "button_label_color_primary",
          "label": "Primary button label",
          "default": "#FFFFFF"
        },
        {
          "type": "color",
          "id": "button_background_color_primary",
          "label": "Primary button background",
          "default": "rgba(0,0,0,0)"
        },
        {
          "type": "header",
          "content": "Secondary button"
        },
        {
          "type": "text",
          "id": "button_label_secondary",
          "label": "Secondary button",
          "default": "Shop now"
        },
        {
          "type": "url",
          "id": "link_secondary",
          "label": "Secondary link"
        },
        {
          "type": "checkbox",
          "id": "external_link_secondary",
          "label": "Open secondary link in a new window"
        },
        {
          "type": "color",
          "id": "button_label_color_secondary",
          "label": "Secondary button label",
          "default": "#121212"
        },
        {
          "type": "color",
          "id": "button_background_color_secondary",
          "label": "Secondary button background",
          "default": "#FFFFFF"
        }
      ]
    },
    {
      "type": "icons",
      "name": "Icons",
      "settings": [
        {
          "type": "range",
          "id": "icon_width",
          "min": 10,
          "max": 100,
          "label": "Icon width",
          "default": 25,
          "unit": "%"
        },
        {
          "type": "range",
          "id": "image_size",
          "min": 10,
          "max": 100,
          "label": "Image size",
          "default": 80,
          "unit": "%"
        },
        {
          "type": "range",
          "id": "gap",
          "min": 0,
          "max": 40,
          "label": "Spacing gap",
          "unit": "px",
          "default": 10
        },
        {
          "type": "header",
          "content": "Icon 1"
        },
        {
          "type": "image_picker",
          "id": "icon_1",
          "label": "Icon 1"
        },
        {
          "type": "text",
          "id": "text_1",
          "label": "Text 1"
        },
        {
          "type": "url",
          "id": "link_1",
          "label": "Link 1"
        },
        {
          "type": "header",
          "content": "Icon 2"
        },
        {
          "type": "image_picker",
          "id": "icon_2",
          "label": "Icon 2"
        },
        {
          "type": "text",
          "id": "text_2",
          "label": "Text 2"
        },
        {
          "type": "url",
          "id": "link_2",
          "label": "Link 2"
        },
        {
          "type": "header",
          "content": "Icon 3"
        },
        {
          "type": "image_picker",
          "id": "icon_3",
          "label": "Icon 3"
        },
        {
          "type": "text",
          "id": "text_3",
          "label": "Text 3"
        },
        {
          "type": "url",
          "id": "link_3",
          "label": "Link 3"
        },
        {
          "type": "header",
          "content": "Icon 4"
        },
        {
          "type": "image_picker",
          "id": "icon_4",
          "label": "Icon 4"
        },
        {
          "type": "text",
          "id": "text_4",
          "label": "Text 4"
        },
        {
          "type": "url",
          "id": "link_4",
          "label": "Link 4"
        }
      ]
    },
    {
      "type": "text_columns",
      "name": "Text columns",
      "settings": [
        {
          "type": "range",
          "id": "gap",
          "min": 0,
          "max": 40,
          "label": "Spacing gap",
          "unit": "px",
          "default": 10
        },
        {
          "type": "select",
          "id": "text_alignment",
          "label": "Text alignment",
          "default": "center",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            },
            {
              "value": "justify",
              "label": "Justify"
            }
          ]
        },
        {
          "type": "header",
          "content": "Column 1"
        },
        {
          "type": "text",
          "id": "heading_1",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "column_1",
          "label": "Text",
          "default": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris nibh enim, ornare at consequat sed, placerat quis libero. Curabitur id nulla ut nunc aliquam sodales.</p>"
        },
        {
          "type": "header",
          "content": "Column 2"
        },
        {
          "type": "text",
          "id": "heading_2",
          "label": "Heading"
        },
        {
          "type": "richtext",
          "id": "column_2",
          "label": "Text",
          "default": "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris nibh enim, ornare at consequat sed, placerat quis libero. Curabitur id nulla ut nunc aliquam sodales.</p>"
        }
      ]
    },
    {
      "type": "inset_image",
      "name": "Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "inset_image",
          "label": "Image"
        },
        {
          "type": "range",
          "id": "inset_image_size",
          "label": "Image size",
          "default": 10,
          "min": 5,
          "max": 100,
          "step": 5,
          "unit": "%"
        },
        {
          "type": "select",
          "id": "image_alignment",
          "label": "Image alignment",
          "default": "default",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            },
            {
              "value": "default",
              "label": "Default"
            }
          ]
        }
      ]
    },
    {
      "type": "newsletter",
      "name": "Newsletter form",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "Any customers who sign up will have an account created for them in Shopify. [View customers](/admin/customers?query=&accepts_marketing=1)"
        },
        {
          "type": "select",
          "id": "layout",
          "label": "Layout",
          "options": [
            {
              "value": "stacked",
              "label": "Stacked"
            },
            {
              "value": "compact",
              "label": "Compact"
            }
          ],
          "default": "compact"
        },
        {
          "type": "text",
          "id": "email_label",
          "label": "Email label",
          "default": "Email address"
        },
        {
          "type": "text",
          "id": "submit_label",
          "label": "Submit label",
          "default": "Submit"
        },
        {
          "type": "header",
          "content": "First name"
        },
        {
          "type": "checkbox",
          "id": "show_first_name",
          "label": "Show first name",
          "default": false
        },
        {
          "type": "text",
          "id": "first_name_label",
          "label": "First name label",
          "default": "First name"
        },
        {
          "type": "header",
          "content": "Last name"
        },
        {
          "type": "checkbox",
          "id": "show_last_name",
          "label": "Show last name",
          "default": false
        },
        {
          "type": "text",
          "id": "last_name_label",
          "label": "Last name label",
          "default": "Last name"
        },
        {
          "type": "header",
          "content": "🎨 Design"
        },
        {
          "type": "color",
          "id": "button_label_color",
          "label": "Button label",
          "default": "#FFFFFF"
        },
        {
          "type": "color",
          "id": "button_background_color",
          "label": "Button background",
          "default": "#283144"
        },
        {
          "type": "range",
          "id": "button_radius",
          "label": "Button border radius",
          "min": 0,
          "max": 50,
          "step": 5,
          "default": 0,
          "unit": "px"
        }
      ]
    },
    {
      "type": "video",
      "name": "Video",
      "settings": [
        {
          "type": "video",
          "id": "video",
          "label": "Video"
        },
        {
          "type": "checkbox",
          "id": "autoplay",
          "label": "Autoplay",
          "info": "Video will be muted.",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "loop",
          "label": "Loop video",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "show_controls",
          "label": "Show controls",
          "default": true
        }
      ]
    },
    {
      "type": "countdown_timer",
      "name": "Countdown timer",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "timezone",
          "label": "Timezone",
          "default": "-05:00 ~ (GMT-05:00) Eastern Time (US & Canada)",
          "options": [
            {
              "value": "-11:00 ~ (GMT-11:00) International Date Line West",
              "label": "(GMT-11:00) International Date Line West"
            },
            {
              "value": "-11:00 ~ (GMT-11:00) Midway Island",
              "label": "(GMT-11:00) Midway Island"
            },
            {
              "value": "-11:00 ~ (GMT-11:00) American Samoa",
              "label": "(GMT-11:00) American Samoa"
            },
            {
              "value": "-10:00 ~ (GMT-10:00) Hawaii",
              "label": "(GMT-10:00) Hawaii"
            },
            {
              "value": "-09:00 ~ (GMT-09:00) Alaska",
              "label": "(GMT-09:00) Alaska"
            },
            {
              "value": "-08:00 ~ (GMT-08:00) Pacific Time (US & Canada)",
              "label": "(GMT-08:00) Pacific Time (US & Canada)"
            },
            {
              "value": "-08:00 ~ (GMT-08:00) Tijuana",
              "label": "(GMT-08:00) Tijuana"
            },
            {
              "value": "-07:00 ~ (GMT-07:00) Mountain Time (US & Canada)",
              "label": "(GMT-07:00) Mountain Time (US & Canada)"
            },
            {
              "value": "-07:00 ~ (GMT-07:00) Arizona",
              "label": "(GMT-07:00) Arizona"
            },
            {
              "value": "-07:00 ~ (GMT-07:00) Chihuahua",
              "label": "(GMT-07:00) Chihuahua"
            },
            {
              "value": "-06:00 ~ (GMT-06:00) Central Time (US & Canada)",
              "label": "(GMT-06:00) Central Time (US & Canada)"
            },
            {
              "value": "-06:00 ~ (GMT-06:00) Saskatchewan",
              "label": "(GMT-06:00) Saskatchewan"
            },
            {
              "value": "-06:00 ~ (GMT-06:00) Monterrey",
              "label": "(GMT-06:00) Monterrey"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Eastern Time (US & Canada)",
              "label": "(GMT-05:00) Eastern Time (US & Canada)"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Indiana (East)",
              "label": "(GMT-05:00) Indiana (East)"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Bogota",
              "label": "(GMT-05:00) Bogota"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Lima",
              "label": "(GMT-05:00) Lima"
            },
            {
              "value": "-05:00 ~ (GMT-05:00) Quito",
              "label": "(GMT-05:00) Quito"
            },
            {
              "value": "-04:00 ~ (GMT-04:00) Atlantic Time (Canada)",
              "label": "(GMT-04:00) Atlantic Time (Canada)"
            },
            {
              "value": "-04:30 ~ (GMT-04:30) Caracas",
              "label": "(GMT-04:30) Caracas"
            },
            {
              "value": "-04:00 ~ (GMT-04:00) La Paz",
              "label": "(GMT-04:00) La Paz"
            },
            {
              "value": "-04:00 ~ (GMT-04:00) Santiago",
              "label": "(GMT-04:00) Santiago"
            },
            {
              "value": "-03:30 ~ (GMT-03:30) Newfoundland",
              "label": "(GMT-03:30) Newfoundland"
            },
            {
              "value": "-03:00 ~ (GMT-03:00) Brasilia",
              "label": "(GMT-03:00) Brasilia"
            },
            {
              "value": "-03:00 ~ (GMT-03:00) Buenos Aires",
              "label": "(GMT-03:00) Buenos Aires"
            },
            {
              "value": "-04:00 ~ (GMT-04:00) Georgetown",
              "label": "(GMT-04:00) Georgetown"
            },
            {
              "value": "-03:00 ~ (GMT-03:00) Greenland",
              "label": "(GMT-03:00) Greenland"
            },
            {
              "value": "-01:00 ~ (GMT-01:00) Azores",
              "label": "(GMT-01:00) Azores"
            },
            {
              "value": "-01:00 ~ (GMT-01:00) Cape Verde Is.",
              "label": "(GMT-01:00) Cape Verde Is."
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Dublin",
              "label": "(GMT+00:00) Dublin"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Edinburgh",
              "label": "(GMT+00:00) Edinburgh"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Lisbon",
              "label": "(GMT+00:00) Lisbon"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Casablanca",
              "label": "(GMT+00:00) Casablanca"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) Monrovia",
              "label": "(GMT+00:00) Monrovia"
            },
            {
              "value": "+00:00 ~ (GMT+00:00) UTC",
              "label": "(GMT+00:00) UTC"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Belgrade",
              "label": "(GMT+01:00) Belgrade"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Bratislava",
              "label": "(GMT+01:00) Bratislava"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Budapest",
              "label": "(GMT+01:00) Budapest"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Ljubljana",
              "label": "(GMT+01:00) Ljubljana"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Prague",
              "label": "(GMT+01:00) Prague"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Sarajevo",
              "label": "(GMT+01:00) Sarajevo"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Skopje",
              "label": "(GMT+01:00) Skopje"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Warsaw",
              "label": "(GMT+01:00) Warsaw"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Zagreb",
              "label": "(GMT+01:00) Zagreb"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Brussels",
              "label": "(GMT+01:00) Brussels"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Copenhagen",
              "label": "(GMT+01:00) Copenhagen"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Madrid",
              "label": "(GMT+01:00) Madrid"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Paris",
              "label": "(GMT+01:00) Paris"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Amsterdam",
              "label": "(GMT+01:00) Amsterdam"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Berlin",
              "label": "(GMT+01:00) Berlin"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Bern",
              "label": "(GMT+01:00) Bern"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Rome",
              "label": "(GMT+01:00) Rome"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Stockholm",
              "label": "(GMT+01:00) Stockholm"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) Vienna",
              "label": "(GMT+01:00) Vienna"
            },
            {
              "value": "+01:00 ~ (GMT+01:00) West Central Africa",
              "label": "(GMT+01:00) West Central Africa"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Bucharest",
              "label": "(GMT+02:00) Bucharest"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Cairo",
              "label": "(GMT+02:00) Cairo"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Helsinki",
              "label": "(GMT+02:00) Helsinki"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Kyiv",
              "label": "(GMT+02:00) Kyiv"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Riga",
              "label": "(GMT+02:00) Riga"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Sofia",
              "label": "(GMT+02:00) Sofia"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Tallinn",
              "label": "(GMT+02:00) Tallinn"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Vilnius",
              "label": "(GMT+02:00) Vilnius"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Athens",
              "label": "(GMT+02:00) Athens"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Istanbul",
              "label": "(GMT+02:00) Istanbul"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Minsk",
              "label": "(GMT+03:00) Minsk"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Jerusalem",
              "label": "(GMT+02:00) Jerusalem"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Harare",
              "label": "(GMT+02:00) Harare"
            },
            {
              "value": "+02:00 ~ (GMT+02:00) Pretoria",
              "label": "(GMT+02:00) Pretoria"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Moscow",
              "label": "(GMT+04:00) Moscow"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Volgograd",
              "label": "(GMT+04:00) Volgograd"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Kuwait",
              "label": "(GMT+03:00) Kuwait"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Riyadh",
              "label": "(GMT+03:00) Riyadh"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Nairobi",
              "label": "(GMT+03:00) Nairobi"
            },
            {
              "value": "+03:00 ~ (GMT+03:00) Baghdad",
              "label": "(GMT+03:00) Baghdad"
            },
            {
              "value": "+03:30 ~ (GMT+03:30) Tehran",
              "label": "(GMT+03:30) Tehran"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Abu Dhabi",
              "label": "(GMT+04:00) Abu Dhabi"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Muscat",
              "label": "(GMT+04:00) Muscat"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Baku",
              "label": "(GMT+04:00) Baku"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Tbilisi",
              "label": "(GMT+04:00) Tbilisi"
            },
            {
              "value": "+04:00 ~ (GMT+04:00) Yerevan",
              "label": "(GMT+04:00) Yerevan"
            },
            {
              "value": "+04:30 ~ (GMT+04:30) Kabul",
              "label": "(GMT+04:30) Kabul"
            },
            {
              "value": "+06:00 ~ (GMT+06:00) Ekaterinburg",
              "label": "(GMT+06:00) Ekaterinburg"
            },
            {
              "value": "+05:00 ~ (GMT+05:00) Islamabad",
              "label": "(GMT+05:00) Islamabad"
            },
            {
              "value": "+05:00 ~ (GMT+05:00) Karachi",
              "label": "(GMT+05:00) Karachi"
            },
            {
              "value": "+05:00 ~ (GMT+05:00) Tashkent",
              "label": "(GMT+05:00) Tashkent"
            },
            {
              "value": "+05:30 ~ (GMT+05:30) Chennai",
              "label": "(GMT+05:30) Chennai"
            },
            {
              "value": "+05:30 ~ (GMT+05:30) Kolkata",
              "label": "(GMT+05:30) Kolkata"
            },
            {
              "value": "+05:45 ~ (GMT+05:45) Kathmandu",
              "label": "(GMT+05:45) Kathmandu"
            },
            {
              "value": "+06:00 ~ (GMT+06:00) Astana",
              "label": "(GMT+06:00) Astana"
            },
            {
              "value": "+06:00 ~ (GMT+06:00) Dhaka",
              "label": "(GMT+06:00) Dhaka"
            },
            {
              "value": "+05:30 ~ (GMT+05:30) Sri Jayawardenepura",
              "label": "(GMT+05:30) Sri Jayawardenepura"
            },
            {
              "value": "+06:00 ~ (GMT+06:00) Almaty",
              "label": "(GMT+06:00) Almaty"
            },
            {
              "value": "+07:00 ~ (GMT+07:00) Novosibirsk",
              "label": "(GMT+07:00) Novosibirsk"
            },
            {
              "value": "+06:30 ~ (GMT+06:30) Rangoon",
              "label": "(GMT+06:30) Rangoon"
            },
            {
              "value": "+07:00 ~ (GMT+07:00) Bangkok",
              "label": "(GMT+07:00) Bangkok"
            },
            {
              "value": "+07:00 ~ (GMT+07:00) Hanoi",
              "label": "(GMT+07:00) Hanoi"
            },
            {
              "value": "+07:00 ~ (GMT+07:00) Jakarta",
              "label": "(GMT+07:00) Jakarta"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Krasnoyarsk",
              "label": "(GMT+08:00) Krasnoyarsk"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Beijing",
              "label": "(GMT+08:00) Beijing"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Chongqing",
              "label": "(GMT+08:00) Chongqing"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Hong Kong",
              "label": "(GMT+08:00) Hong Kong"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Urumqi",
              "label": "(GMT+08:00) Urumqi"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Kuala Lumpur",
              "label": "(GMT+08:00) Kuala Lumpur"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Singapore",
              "label": "(GMT+08:00) Singapore"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Taipei",
              "label": "(GMT+08:00) Taipei"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Perth",
              "label": "(GMT+08:00) Perth"
            },
            {
              "value": "+09:00 ~ (GMT+09:00) Irkutsk",
              "label": "(GMT+09:00) Irkutsk"
            },
            {
              "value": "+08:00 ~ (GMT+08:00) Ulaan Bataar",
              "label": "(GMT+08:00) Ulaan Bataar"
            },
            {
              "value": "+09:00 ~ (GMT+09:00) Seoul",
              "label": "(GMT+09:00) Seoul"
            },
            {
              "value": "+09:00 ~ (GMT+09:00) Osaka",
              "label": "(GMT+09:00) Osaka"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Yakutsk",
              "label": "(GMT+10:00) Yakutsk"
            },
            {
              "value": "+09:30 ~ (GMT+09:30) Darwin",
              "label": "(GMT+09:30) Darwin"
            },
            {
              "value": "+09:30 ~ (GMT+09:30) Adelaide",
              "label": "(GMT+09:30) Adelaide"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Canberra",
              "label": "(GMT+10:00) Canberra"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Melbourne",
              "label": "(GMT+10:00) Melbourne"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Sydney",
              "label": "(GMT+10:00) Sydney"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Brisbane",
              "label": "(GMT+10:00) Brisbane"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Hobart",
              "label": "(GMT+10:00) Hobart"
            },
            {
              "value": "+11:00 ~ (GMT+11:00) Vladivostok",
              "label": "(GMT+11:00) Vladivostok"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Guam",
              "label": "(GMT+10:00) Guam"
            },
            {
              "value": "+10:00 ~ (GMT+10:00) Port Moresby",
              "label": "(GMT+10:00) Port Moresby"
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Magadan",
              "label": "(GMT+12:00) Magadan"
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Solomon Is.",
              "label": "(GMT+12:00) Solomon Is."
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Fiji",
              "label": "(GMT+12:00) Fiji"
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Kamchatka",
              "label": "(GMT+12:00) Kamchatka"
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Marshall Is.",
              "label": "(GMT+12:00) Marshall Is."
            },
            {
              "value": "+12:00 ~ (GMT+12:00) Auckland",
              "label": "(GMT+12:00) Auckland"
            },
            {
              "value": "+13:00 ~ (GMT+13:00) Nuku'alofa",
              "label": "(GMT+13:00) Nuku'alofa"
            },
            {
              "value": "+13:00 ~ (GMT+13:00) Tokelau Is.",
              "label": "(GMT+13:00) Tokelau Is."
            },
            {
              "value": "+13:00 ~ (GMT+13:00) Samoa",
              "label": "(GMT+13:00) Samoa"
            }
          ]
        },
        {
          "type": "header",
          "content": "⏱ Start"
        },
        {
          "type": "select",
          "id": "start_month",
          "label": "Month",
          "default": "January",
          "options": [
            {
              "value": "January",
              "label": "January"
            },
            {
              "value": "February",
              "label": "February"
            },
            {
              "value": "March",
              "label": "March"
            },
            {
              "value": "April",
              "label": "April"
            },
            {
              "value": "May",
              "label": "May"
            },
            {
              "value": "June",
              "label": "June"
            },
            {
              "value": "July",
              "label": "July"
            },
            {
              "value": "August",
              "label": "August"
            },
            {
              "value": "September",
              "label": "September"
            },
            {
              "value": "October",
              "label": "October"
            },
            {
              "value": "November",
              "label": "November"
            },
            {
              "value": "December",
              "label": "December"
            }
          ]
        },
        {
          "type": "range",
          "id": "start_day",
          "label": "Day",
          "min": 1,
          "max": 31,
          "step": 1,
          "default": 1
        },
        {
          "type": "text",
          "id": "start_year",
          "label": "Year",
          "default": "2021"
        },
        {
          "type": "select",
          "id": "start_time",
          "label": "Start time",
          "default": "23:30:00",
          "options": [
            {
              "value": "00:00:00",
              "label": "12:00 am (0:00)"
            },
            {
              "value": "00:30:00",
              "label": "12:30 am (0:30)"
            },
            {
              "value": "01:00:00",
              "label": "1:00 am (1:00)"
            },
            {
              "value": "01:30:00",
              "label": "1:30 am (1:30)"
            },
            {
              "value": "02:00:00",
              "label": "2:00 am (2:00)"
            },
            {
              "value": "02:30:00",
              "label": "2:30 am (2:30)"
            },
            {
              "value": "03:00:00",
              "label": "3:00 am (3:00)"
            },
            {
              "value": "03:30:00",
              "label": "3:30 am (3:30)"
            },
            {
              "value": "04:00:00",
              "label": "4:00 am (4:00)"
            },
            {
              "value": "04:30:00",
              "label": "4:30 am (4:30)"
            },
            {
              "value": "05:00:00",
              "label": "5:00 am (5:00)"
            },
            {
              "value": "05:30:00",
              "label": "5:30 am (5:30)"
            },
            {
              "value": "06:00:00",
              "label": "6:00 am (6:00)"
            },
            {
              "value": "06:30:00",
              "label": "6:30 am (6:30)"
            },
            {
              "value": "07:00:00",
              "label": "7:00 am (7:00)"
            },
            {
              "value": "07:30:00",
              "label": "7:30 am (7:30)"
            },
            {
              "value": "08:00:00",
              "label": "8:00 am (8:00)"
            },
            {
              "value": "08:30:00",
              "label": "8:30 am (8:30)"
            },
            {
              "value": "09:00:00",
              "label": "9:00 am (9:00)"
            },
            {
              "value": "09:30:00",
              "label": "9:30 am (9:30)"
            },
            {
              "value": "10:00:00",
              "label": "10:00 am (10:00)"
            },
            {
              "value": "10:30:00",
              "label": "10:30 am (10:30)"
            },
            {
              "value": "11:00:00",
              "label": "11:00 am (11:00)"
            },
            {
              "value": "11:30:00",
              "label": "11:30 am (11:30)"
            },
            {
              "value": "12:00:00",
              "label": "12:00 pm (12:00)"
            },
            {
              "value": "12:30:00",
              "label": "12:30 pm (12:30)"
            },
            {
              "value": "13:00:00",
              "label": "1:00 pm (13:00)"
            },
            {
              "value": "13:30:00",
              "label": "1:30 pm (13:30)"
            },
            {
              "value": "14:00:00",
              "label": "2:00 pm (14:00)"
            },
            {
              "value": "14:30:00",
              "label": "2:30 pm (14:30)"
            },
            {
              "value": "15:00:00",
              "label": "3:00 pm (15:00)"
            },
            {
              "value": "15:30:00",
              "label": "3:30 pm (15:30)"
            },
            {
              "value": "16:00:00",
              "label": "4:00 pm (16:00)"
            },
            {
              "value": "16:30:00",
              "label": "4:30 pm (16:30)"
            },
            {
              "value": "17:00:00",
              "label": "5:00 pm (17:00)"
            },
            {
              "value": "17:30:00",
              "label": "5:30 pm (17:30)"
            },
            {
              "value": "18:00:00",
              "label": "6:00 pm (18:00)"
            },
            {
              "value": "18:30:00",
              "label": "6:30 pm (18:30)"
            },
            {
              "value": "19:00:00",
              "label": "7:00 pm (19:00)"
            },
            {
              "value": "19:30:00",
              "label": "7:30 pm (19:30)"
            },
            {
              "value": "20:00:00",
              "label": "8:00 pm (20:00)"
            },
            {
              "value": "20:30:00",
              "label": "8:30 pm (20:30)"
            },
            {
              "value": "21:00:00",
              "label": "9:00 pm (21:00)"
            },
            {
              "value": "21:30:00",
              "label": "9:30 pm (21:30)"
            },
            {
              "value": "22:00:00",
              "label": "10:00 pm (22:00)"
            },
            {
              "value": "22:30:00",
              "label": "10:30 pm (22:30)"
            },
            {
              "value": "23:00:00",
              "label": "11:00 pm (23:00)"
            },
            {
              "value": "23:30:00",
              "label": "11:30 pm (23:30)"
            }
          ]
        },
        {
          "type": "header",
          "content": "🏁 End"
        },
        {
          "type": "select",
          "id": "end_month",
          "label": "Month",
          "default": "December",
          "options": [
            {
              "value": "January",
              "label": "January"
            },
            {
              "value": "February",
              "label": "February"
            },
            {
              "value": "March",
              "label": "March"
            },
            {
              "value": "April",
              "label": "April"
            },
            {
              "value": "May",
              "label": "May"
            },
            {
              "value": "June",
              "label": "June"
            },
            {
              "value": "July",
              "label": "July"
            },
            {
              "value": "August",
              "label": "August"
            },
            {
              "value": "September",
              "label": "September"
            },
            {
              "value": "October",
              "label": "October"
            },
            {
              "value": "November",
              "label": "November"
            },
            {
              "value": "December",
              "label": "December"
            }
          ]
        },
        {
          "type": "range",
          "id": "end_day",
          "label": "Day",
          "min": 1,
          "max": 31,
          "step": 1,
          "default": 1
        },
        {
          "type": "text",
          "id": "end_year",
          "label": "Year",
          "default": "2024"
        },
        {
          "type": "select",
          "id": "end_time",
          "label": "End time",
          "default": "23:30:00",
          "options": [
            {
              "value": "00:00:00",
              "label": "12:00 am (0:00)"
            },
            {
              "value": "00:30:00",
              "label": "12:30 am (0:30)"
            },
            {
              "value": "01:00:00",
              "label": "1:00 am (1:00)"
            },
            {
              "value": "01:30:00",
              "label": "1:30 am (1:30)"
            },
            {
              "value": "02:00:00",
              "label": "2:00 am (2:00)"
            },
            {
              "value": "02:30:00",
              "label": "2:30 am (2:30)"
            },
            {
              "value": "03:00:00",
              "label": "3:00 am (3:00)"
            },
            {
              "value": "03:30:00",
              "label": "3:30 am (3:30)"
            },
            {
              "value": "04:00:00",
              "label": "4:00 am (4:00)"
            },
            {
              "value": "04:30:00",
              "label": "4:30 am (4:30)"
            },
            {
              "value": "05:00:00",
              "label": "5:00 am (5:00)"
            },
            {
              "value": "05:30:00",
              "label": "5:30 am (5:30)"
            },
            {
              "value": "06:00:00",
              "label": "6:00 am (6:00)"
            },
            {
              "value": "06:30:00",
              "label": "6:30 am (6:30)"
            },
            {
              "value": "07:00:00",
              "label": "7:00 am (7:00)"
            },
            {
              "value": "07:30:00",
              "label": "7:30 am (7:30)"
            },
            {
              "value": "08:00:00",
              "label": "8:00 am (8:00)"
            },
            {
              "value": "08:30:00",
              "label": "8:30 am (8:30)"
            },
            {
              "value": "09:00:00",
              "label": "9:00 am (9:00)"
            },
            {
              "value": "09:30:00",
              "label": "9:30 am (9:30)"
            },
            {
              "value": "10:00:00",
              "label": "10:00 am (10:00)"
            },
            {
              "value": "10:30:00",
              "label": "10:30 am (10:30)"
            },
            {
              "value": "11:00:00",
              "label": "11:00 am (11:00)"
            },
            {
              "value": "11:30:00",
              "label": "11:30 am (11:30)"
            },
            {
              "value": "12:00:00",
              "label": "12:00 pm (12:00)"
            },
            {
              "value": "12:30:00",
              "label": "12:30 pm (12:30)"
            },
            {
              "value": "13:00:00",
              "label": "1:00 pm (13:00)"
            },
            {
              "value": "13:30:00",
              "label": "1:30 pm (13:30)"
            },
            {
              "value": "14:00:00",
              "label": "2:00 pm (14:00)"
            },
            {
              "value": "14:30:00",
              "label": "2:30 pm (14:30)"
            },
            {
              "value": "15:00:00",
              "label": "3:00 pm (15:00)"
            },
            {
              "value": "15:30:00",
              "label": "3:30 pm (15:30)"
            },
            {
              "value": "16:00:00",
              "label": "4:00 pm (16:00)"
            },
            {
              "value": "16:30:00",
              "label": "4:30 pm (16:30)"
            },
            {
              "value": "17:00:00",
              "label": "5:00 pm (17:00)"
            },
            {
              "value": "17:30:00",
              "label": "5:30 pm (17:30)"
            },
            {
              "value": "18:00:00",
              "label": "6:00 pm (18:00)"
            },
            {
              "value": "18:30:00",
              "label": "6:30 pm (18:30)"
            },
            {
              "value": "19:00:00",
              "label": "7:00 pm (19:00)"
            },
            {
              "value": "19:30:00",
              "label": "7:30 pm (19:30)"
            },
            {
              "value": "20:00:00",
              "label": "8:00 pm (20:00)"
            },
            {
              "value": "20:30:00",
              "label": "8:30 pm (20:30)"
            },
            {
              "value": "21:00:00",
              "label": "9:00 pm (21:00)"
            },
            {
              "value": "21:30:00",
              "label": "9:30 pm (21:30)"
            },
            {
              "value": "22:00:00",
              "label": "10:00 pm (22:00)"
            },
            {
              "value": "22:30:00",
              "label": "10:30 pm (22:30)"
            },
            {
              "value": "23:00:00",
              "label": "11:00 pm (23:00)"
            },
            {
              "value": "23:30:00",
              "label": "11:30 pm (23:30)"
            }
          ]
        }
      ]
    },
    {
      "type": "liquid",
      "name": "Liquid/HTML",
      "settings": [
        {
          "type": "paragraph",
          "content": "Copy and paste your custom code."
        },
        {
          "type": "liquid",
          "id": "liquid",
          "label": "Liquid and/or HTML"
        }
      ]
    },
    {
      "type": "@app"
    }
  ],
  "settings": [
    {
      "type": "video",
      "id": "video",
      "label": "Video"
    },
    {
      "type": "checkbox",
      "id": "loop",
      "label": "Loop video",
      "default": true
    },
    {
      "type": "select",
      "id": "image_crop",
      "label": "Banner height",
      "default": "1200:600",
      "options": [
        {
          "label": "Defined aspect ratio (see below)",
          "value": "none"
        },
        {
          "label": "Extra small",
          "value": "1200:200"
        },
        {
          "label": "Small",
          "value": "1200:400"
        },
        {
          "label": "Medium",
          "value": "1200:600"
        },
        {
          "label": "Large",
          "value": "1200:800"
        },
        {
          "label": "Extra large",
          "value": "1200:1000"
        }
      ]
    },
    {
      "type": "text",
      "id": "aspect_ratio",
      "label": "Aspect ratio",
      "default": "16:9",
      "info": "eg. 16:9, 4:3. Will only be applied if 'Defined aspect ratio' is selected as banner height."
    },
    {
      "type": "header",
      "content": "📱 Mobile"
    },
    {
      "type": "text",
      "id": "mobile_aspect_ratio",
      "label": "Mobile aspect ratio",
      "info": "Set specific aspect ratio for smaller screensizes - eg. 1:1."
    },
    {
      "type": "url",
      "id": "link",
      "label": "Link",
      "info": "Links entire video."
    },
    {
      "type": "header",
      "content": "✏️ Text appearance"
    },
    {
      "type": "range",
      "id": "text_size",
      "label": "Text size",
      "min": 80,
      "max": 150,
      "step": 5,
      "default": 100,
      "unit": "%"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "default": "left",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ]
    },
    {
      "type": "select",
      "id": "text_position",
      "label": "Text position",
      "default": "left center",
      "options": [
        {
          "value": "left top",
          "label": "Top left"
        },
        {
          "value": "center top",
          "label": "Top center"
        },
        {
          "value": "right top",
          "label": "Top right"
        },
        {
          "value": "left center",
          "label": "Left"
        },
        {
          "value": "center center",
          "label": "Center"
        },
        {
          "value": "right center",
          "label": "Right"
        },
        {
          "value": "left bottom",
          "label": "Bottom left"
        },
        {
          "value": "center bottom",
          "label": "Bottom center"
        },
        {
          "value": "right bottom",
          "label": "Bottom right"
        }
      ]
    },
    {
      "type": "range",
      "id": "text_width",
      "label": "Text box width",
      "min": 400,
      "max": 1000,
      "step": 10,
      "default": 600,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🎨 Design"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#121212"
    },
    {
      "type": "color_background",
      "id": "text_background_color",
      "label": "Text background"
    },
    {
      "type": "color_background",
      "id": "image_overlay_color",
      "label": "Image overlay",
      "default": "radial-gradient(rgba(251, 51, 166, 0), rgba(48, 145, 211, 0.4) 36%, rgba(0, 0, 0, 0.8) 100%)"
    },
    {
      "type": "select",
      "id": "animation",
      "label": "Animation",
      "default": "none",
      "options": [
        {
          "value": "fade-in",
          "label": "Fade-in"
        },
        {
          "value": "fade-in-left",
          "label": "Fade-in left"
        },
        {
          "value": "fade-in-right",
          "label": "Fade-in right"
        },
        {
          "value": "fade-in-up",
          "label": "Fade-in up"
        },
        {
          "value": "fade-in-down",
          "label": "Fade-in down"
        },
        {
          "value": "none",
          "label": "None"
        }
      ]
    },
    {
      "type": "header",
      "content": "🖼 Layout"
    },
    {
      "type": "text",
      "id": "max_width",
      "label": "Maximum width",
      "placeholder": "eg. 1200px",
      "info": "Sets width constraint. Prevents inner content from moving too far to the edge on large screens."
    },
    {
      "type": "range",
      "id": "outer_margin_top",
      "label": "Outer margin - top",
      "min": 0,
      "max": 100,
      "default": 40,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "outer_margin_bottom",
      "label": "Outer margin - bottom",
      "min": 0,
      "max": 100,
      "default": 40,
      "step": 5,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "🚨 Advanced"
    },
    {
      "type": "html",
      "id": "custom_css",
      "label": "CSS"
    },
    {
      "type": "html",
      "id": "mobile_custom_css",
      "label": "Mobile CSS",
      "info": "Applied on screens less than 480px."
    },
    {
      "type": "checkbox",
      "id": "override_theme_font",
      "label": "Override default theme font",
      "default": false
    },
    {
      "type": "font_picker",
      "id": "heading_font",
      "label": "Heading",
      "default": "serif"
    },
    {
      "type": "font_picker",
      "id": "main_font",
      "label": "Text",
      "default": "sans-serif"
    }
  ],
  "presets": [
    {
      "name": "Banner - video background 🎒",
      "settings": {
        "text_alignment": "center",
        "text_position": "center center"
      },
      "blocks": [
        {
          "type": "heading"
        },
        {
          "type": "text"
        }
      ]
    }
  ],
  "locales": {
    "en": {
      "days": "Days",
      "hours": "Hours",
      "minutes": "Minutes",
      "seconds": "Seconds"
    }
  }
}
{% endschema %}

  {%- comment -%} JSON Settings {%- endcomment -%}
<script type="application/json" data-dsgn-pck="{{ section.id }}">
  {
    "id": {{ section.id | json }},
    "animation": {{ section.settings.animation | json }}
  }
</script>
{%- comment -%} JavaScript {%- endcomment -%}
<script data-dsgn-pck-js="{{ section.id }}" type="module" defer>
(function(){

  const designPack = {
    settings: {},
    animateSection: function(entries, observer){
      // Target the first entry available.
      let observedSection = entries[0];
      if (observedSection.isIntersecting) {
        observedSection.target.classList.add('dsgn-pck__animation-applied');
      }
    },
    initializeClock(selector, endtime, section) {
      function updateClock() {
        const t = designPack.getTimeRemaining(endtime);
        const daysSpan = clock.querySelector('.dsgn-pck__days .dsgn-pck__number');
        const hoursSpan = clock.querySelector('.dsgn-pck__hours .dsgn-pck__number');
        const minutesSpan = clock.querySelector('.dsgn-pck__minutes .dsgn-pck__number');
        const secondsSpan = clock.querySelector('.dsgn-pck__seconds .dsgn-pck__number');

        if (daysSpan.innerHTML != t.days){
          daysSpan.innerHTML = t.days;
        }
        if (hoursSpan.innerHTML != t.hours){
          hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
        }
        if (minutesSpan.innerHTML != t.minutes){
          minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
        }
        if (secondsSpan.innerHTML != t.seconds){
          secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);
        }

        if (t.total <= 0) {
          clearInterval(timeinterval);
        }
      }

      const clock = section.querySelector(selector);
      updateClock();
      const timeinterval = setInterval(updateClock, 1000);
    },
    getTimeRemaining(endtime){
      const total = Date.parse(endtime) - Date.parse(new Date());
      const seconds = Math.floor( (total/1000) % 60 );
      const minutes = Math.floor( (total/1000/60) % 60 );
      const hours = Math.floor( (total/(1000*60*60)) % 24 );
      const days = Math.floor( total/(1000*60*60*24) );

      return {
        total,
        days,
        hours,
        minutes,
        seconds
      };
    },
    enableCountdownTimer: function(section){
      const clock = '.dsgn-pck__clock';
      const startDate = section.querySelector('[data-timer-start]').dataset.timerStart;
      const endDate = section.querySelector('[data-timer-end]').dataset.timerEnd;

      const startMs = Date.parse(startDate);
      const endMs = Date.parse(endDate);
      const currentMs = Date.parse(new Date());

      if (endMs > currentMs && currentMs >= startMs ) {
        designPack.initializeClock(clock, endDate, section);
      } else {
        section.querySelector(`.dsgn-pck__clock-wrap`).style.display = 'none';
      }
    },
    load: function(section){

      document.addEventListener('touchstart', function () {
        const videoElement = section.querySelector('video');
        if (!videoElement.playing) {
          videoElement.play();
        }
      });

      if (this.settings.animation !== 'none'){
        const options = {
          root: null,
          rootMargin: '0px',
          threshold: [0, 0.25, 0.5, 0.75, 1]
        };
        // Construct Intersection Observer.
        const observer = new IntersectionObserver( this.animateSection, options );
        // Observe if element is present.
        if (section) {
          observer.observe(section);
        }
      }

      const countdownTimer = section.querySelector('.dsgn-pck__clock');
      if (typeof countdownTimer !== 'undefined' && countdownTimer !== null){
        designPack.enableCountdownTimer(section);
      }
    },
    unload: function(section){
      section.classList.remove('dsgn-pck__animation-applied')
    }
  }

  window.addEventListener('shopify:section:unload', function (e) {
    const settings = document.querySelector(`[data-dsgn-pck="${e.detail.sectionId}"]`);
    const sectionId = e.detail.sectionId;
    const section = document.querySelector(`#DP--${e.detail.sectionId}`);
    if (sectionId == designPack.settings.id){
      designPack.unload(section);
    }
  });

  designPack.settings = JSON.parse(document.querySelector('[data-dsgn-pck="{{ section.id }}"]').innerHTML);
  const sectionId = {{ section.id | json }};
  const section = document.querySelector(`#DP--${sectionId}`);

  if (sectionId == designPack.settings.id){
    designPack.load(section);
  }
})()
</script>
